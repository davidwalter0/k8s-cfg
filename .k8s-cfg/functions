#!/bin/bash
# set -o errexit
set -o nounset
set -o pipefail
export K8S_ARGV=${@}
# These scripts assume a directory structure on the target of
# under the jenkins home of 
# .../
#         /.k8s-cfg    # generated secrets and configure items with text replacement.
#         /bin     # kubectl or other binaries
#         /k8s     # yaml configs
#         /scripts # this script and collections of other helpers

function init
{
    local k8scfgdir=${dir}/.k8s-cfg
    local cfgdir=${dir}/.cfg
    local config=${cfgdir}/config

    if [[ ! -e ${config:-} ]]; then
        echo "${config} was not found. have you tailored the configuration to your requirements?"
        echo "Try executing ${0} --initialize"
        exit 3
    fi
    . ${config}
}

function wrap-command
{
    local cfgdir=${dir}/.cfg
    local k8scfgdir=$(readlink -f ${dir}/.k8s-cfg)
    . ${k8scfgdir}/load-configuration
    eval ${@}
}

function check
{
    export cfgdir=${dir}/.cfg
    export k8scfgdir=$(readlink -f ${dir}/.k8s-cfg)
    export k8scfgbin=$(readlink -f ${k8scfgdir}/../bin)
    if [[ ! ${dir:-} ]]; then
        echo "dir: variable not set"
        echo "A recipe in the script sourcing this file may work:"
        echo "dir=\$(readlink -f \$(dirname \$(readlink -f \${0}))/..)"
        exit 3
    fi
}

function start
{
    local k8scfgdir=${dir}/.k8s-cfg
    . ${k8scfgdir}/load-configuration
    . ${k8scfgdir}/flags
    kubectl create -f- <<EOF
$(make-yaml)
EOF
}

function stop
{
    local k8scfgdir=${dir}/.k8s-cfg
    . ${k8scfgdir}/load-configuration
    . ${k8scfgdir}/flags
    kubectl delete -f- <<EOF
$(make-yaml)
EOF
}

function status-all
{
    local k8scfgdir=${dir}/.k8s-cfg
    . ${k8scfgdir}/load-configuration
    . ${k8scfgdir}/flags
    kubectl get --output=wide node
    kubectl get --all-namespaces --output=wide rc,pods,svc,ep
}

function status
{
    local k8scfgdir=${dir}/.k8s-cfg
    local cfgdir=${dir}/.cfg
    . ${k8scfgdir}/load-configuration
    . ${k8scfgdir}/flags
    echo nodes
    namespace-command kubectl get --output=wide node
    echo replication controllers
    namespace-command kubectl get --output=wide rc         ${name}        
    echo pods
    namespace-command kubectl get --output=wide po                        |head -1
    namespace-command kubectl get --output=wide po                        |grep ${name}
    echo services
    namespace-command kubectl get --output=wide svc        ${name}        
    echo endpoints
    namespace-command kubectl get --output=wide ep         ${name}        
    echo secrets
    namespace-command kubectl get --output=wide secret     ${name}-secret 
}

# --namespace=kube-system exec -it k8s-jenkins-ui-qfduo -c k8s-jump -- /bin/bash

function generate
{
    local k8scfgdir=${dir}/.k8s-cfg
    local cfgdir=${dir}/.cfg
    . ${k8scfgdir}/load-configuration
    if [[ ${yaml:-} && -e ${yaml} && ${template:-} && ! -e ${template} ]] ; then
        if (( debug )); then
            cat > /dev/stderr <<EOF
# ************************************************************************"
# The template file isn't present. 
#    ${template}
# However there is a target yaml file:
#    ${yaml}. 
#
# Refusing to remove the target yaml in case you intend to use it to run
# a kubectl command.
#
# Check your configuration.
# yaml file yaml=${yaml}
# template file template=${template}
# Refusing to remove ${yaml} exiting...
# ************************************************************************"
EOF
        fi
    else
        # remove cruft if a debug run generated a version of the yaml definition.
        if [[ ${yaml:-} && -e ${yaml} && ${template:-} && -e ${template} ]] ; then
            rm -f ${yaml}
        fi
    fi

    if (( debug )); then
        if [[ ${template:-} && -e ${template} ]]; then
            make-yaml > ${yaml}
            chmod 600 ${yaml}
        else
            cat > /dev/stderr <<EOF
# ************************************************************************"
# The template file isn't present. 
#    ${template}
# Won't create the debug file: 
#    ${yaml}. 
# ************************************************************************"
EOF
        fi
    fi
}

function git-config
{
    local k8scfgdir=${dir}/.k8s-cfg
    . ${k8scfgdir}/load-configuration
    local repo=${name}
    local host=${id}k8s-git-repo

    echo
    if [[ -e ${dir}/.git/config ]] && grep remote ${dir}/.git/config ; then
        cat <<EOF
########################################################################
There is an existing git config and repo tag.
Remove the remotes or modify them manually.

The following may be useful for git repo initialization if your prior
repo didn't work.

ssh ${host} <<INIT
mkdir ${repo}.git
cd ${repo}.git
git init --bare

INIT

# .ssh/config entry to enable simple access

# Change port to 22 and comment hostname if using k8s yaml definition.
# and adding the master [ or host like k8s-master-01 ] to /etc/hosts
# If accessing remotely via a docker host, maybe mapping -p 2222:22
# . . .

# You probably want to have either DNS access or /etc/hosts configured
# for your host and jump host name. In this example k8s-master-01 acts
# as the jump host to the DNS enabled k8s cluster

# id [${id}] comes from .k8s-cfg/config
host ${id}k8s-git-repo
  User                  git
#  Port                  2222
#  the name I have the k8s service. . .
#  Hostname             alternate-name
  IdentitiesOnly        yes
  TCPKeepAlive          yes
  IdentityFile          ~/.ssh/id_ed25519
# If connecting from non local work laptop for example . . .
#  ProxyCommand       ssh -XC -A k8s-master-01 -W '%h:%p'



########################################################################
You can manually fix up your config using options similar to:

git remote add ${repo} ${k8srepo}
git push --set-upstream ${repo} master
git config push.default simple
git push ${repo} master

# git remote add github ${hubrepo}
# git push --set-upstream github master

########################################################################
EOF
        usage
        exit 3
    fi


    ssh ${host}<<INIT
mkdir ${repo}.git
cd ${repo}.git
git init --bare
INIT

    cat <<EOF
git remote add ${repo} ${k8srepo}
git push --set-upstream ${repo} master
EOF
    git remote add ${repo} ${k8srepo}
    git push --set-upstream ${repo} master
    git config push.default simple
    #    git push ${repo} master
    #    git remote add github ${hubrepo}
    #    git push --set-upstream github master
}

function namespace-command
{
    # local k8scfgdir=${dir}/.k8s-cfg
    # local cfgdir=${dir}/.cfg
    # . ${k8scfgdir}/load-configuration

    if [[ ! ${namespace:-} ]]; then
        namespace=default
    fi
    local command="${@} --namespace=${namespace}"
    if (( debug )) ; then
        echo ${command}
    fi
    ${command}
}

function describe
{
    namespace-command kubectl describe po ${name}
}

function replicas
{
    namespace-command kubectl scale --replicas=${1} rc/${name}
}

function push-image
{
    local k8scfgdir=${dir}/.k8s-cfg
    . ${k8scfgdir}/load-configuration

    local image=${dir##*/}
    docker save ${image} > ${image}.tar
    for host in k8s-${id}master-01 k8s-${id}node-0{1..2}; do
        echo pushing to host ${host}
        ssh ${host} mkdir -p work
        rsync -rlaz --progress --partial ${dir}/${image}.tar ${host}:work/
        ssh -tt ${host} "for file in work/${image}.tar; do echo sudo docker load -i \${file}; sudo docker load -i \${file}; done"
    done
}

function main
{
    local k8scfgdir=${dir}/.k8s-cfg
    local cfgdir=${dir}/.cfg
    . ${k8scfgdir}/load-configuration

    local command=""
    local count=""
    if [[ -e ${cfgdir}/usage ]]; then
        . ${cfgdir}/usage
    else
        . ${k8scfgdir}/usage
    fi
    
    for arg in ${@}; do
        case ${arg} in
            --initialize)
                local k8scfgdir=${dir}/.k8s-cfg
                local cfgdir=${dir}/.cfg
                local config=${cfgdir}/config
                if [[ -e ${k8scfgdir}/initialize ]]; then
                    . ${k8scfgdir}/initialize
                else
                    echo ${k8scfgdir}/initialize not found. Is this configured correctly
                    exit 3
                fi
                INITIALIZE # check and initialize config if not created
                ;;
            *)
                ;;
        esac
    done
    if (( $# )) ; then
        for arg in ${@}; do
            case ${arg} in
                --debug|--initialize|--verbose|--master=*|--name=*|--namespace=*|--id=*) # ignore these, don't generate a usage call
                    ;;
                --master|--name|--namespace|--id) # ignore these, don't generate a usage call
                    echo "--name, --namespace and --id require arguments --name=..."
                    usage
                    exit 3
                    ;;
                --replicas=[0-9]*)
                    count=${arg##*=}
                    command="replicas ${count}"
                    ;;
                --replicas)
                    printf "\n${0##*/} --replicas requires an number of replicas to scale\n"
                    usage
                    exit 3
                    ;;
                --describe)
                    command=describe
                    ;;
                --push-image)
                    command=push-image
                    ;;
                --start)
                    command=start
                    ;;
                --stop)
                    command=stop
                    ;;
                --status)
                    command=status
                    ;;
                --status-all)
                    command=status-all
                    ;;
                --git-config)
                    command=git-config
                    ;;
                --tunnel-start)
                    command=tunnel-start
                    ;;
                --tunnel-stop)
                    command=tunnel-stop
                    ;;
                --tunnel-status)
                    command=tunnel-status
                    ;;
                *)
                    usage
                    exit 3
            esac
        done
    else
        usage
        exit 3
    fi

    if [[ ${command:-} ]]; then
        generate ${@}
        wrap-command ${command}
    fi
}
check

