#!/bin/bash

function tunnel-name
{
    local k8scfgdir=$(readlink -f ${dir}/.k8s-cfg)
    . ${k8scfgdir}/load-configuration
    # . ${k8scfgdir}/flags
    local tunnel="ssh-tunnel-${name}.${namespace}.svc.${domain}"
    echo "${tunnel}"
}

function tunnel-check
{

    local tunnel="${1}"
    # oddly grep was return 141 when -q was used
    ps -eo pid,cmd|grep -v grep|grep -sEe "${tunnel}"
}

function tunnel-start
{
    local cfgdir=${dir}/.cfg
    local k8scfgdir=$(readlink -f ${dir}/.k8s-cfg)
    . ${k8scfgdir}/load-configuration
    # . ${cfgdir}/config
    # . ${k8scfgdir}/flags

    if [[ ! ${port:-} ]]; then
        printf "tunnel-start no port assignment.\nmaybe this doesn't have a service configured with an external port?\n"
        exit 3
    fi
    trap tunnel-stop INT TERM
    # keep ssh in the foreground [no -f {fork}]
    local tunnel=$(tunnel-name ${namespace})
    local command="ssh -nNT -L ${port}:${name}.${namespace}.svc.cluster.local:${port} ${os_user}@${master}"
    if ! tunnel-check ${tunnel} ; then
        ( exec -a "${tunnel}" /bin/bash "${k8scfgdir}/watch" "${tunnel}" "${command}" ) &
    fi
}

function tunnel-stop
{
    local cfgdir=${dir}/.cfg
    local k8scfgdir=$(readlink -f ${dir}/.k8s-cfg)
    . ${k8scfgdir}/load-configuration
    . ${k8scfgdir}/flags
    if [[ ! ${port:-} ]]; then
        printf "tunnel-start no port assignment.\nmaybe this doesn't have a service configured with an external port?\n"
        exit 3
    fi

    local tunnel=$(tunnel-name ${namespace})
    local command="ssh -nNT -L ${port}:${name}.${namespace}.svc.cluster.local:${port} ${os_user}@${master}"

    local text=$(ps -eo pid,args|grep -sEe "${tunnel}.*watch"|grep -vE 'grep')
    text=${text# *}
    if [[ ${text:-} ]]; then
        pid=${text%% *}
        kill -TERM ${pid}
        sleep 1
        kill -KILL ${pid}
    fi
    local text=$(ps -eo pid,args|grep -sEe "${command}"|grep -vE 'grep|watch')
    text=${text# *}
    if [[ ${text:-} ]]; then
        pid=${text%% *}
        kill -TERM ${pid}
        sleep 1
        kill -KILL ${pid}
    fi
}

function tunnel-status
{
    local tunnel=$(tunnel-name)
    if (( debug )); then
        echo "ps -eo pid,rss,vsz,cpu,start_time,args|grep -vE grep|grep \"${tunnel}\""
    fi
    ps -eo pid,rss,vsz,cpu,start_time,args|grep -vE grep|grep "${tunnel}"
}
